name: Deploy to AWS ECS Dev Environment

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'application/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'application/**'
  workflow_dispatch:    

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: base-infra-dev
  ECS_SERVICE_DEV: base-infra-dev
  ECS_CLUSTER_DEV: base-infra-dev
  ECS_SERVICE_QA: base-infra-qa
  ECS_CLUSTER_QA: base-infra-qa
  ECS_SERVICE_PROD: base-infra-prod
  ECS_CLUSTER_PROD: base-infra-prod 
  CONTAINER_NAME: base-infra

jobs:
  build-and-deploy-dev:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
    - name: Create short sha tag for image
      id: short-sha
      run: echo "sha=$(echo ${{ github.sha}} | cut -c1-7)" >>$GITHUB_OUTPUT
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }} 
      run: |
        cd application
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha}} .
        
        # Push both tagged and latest images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha }}
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha }}" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_SERVICE_DEV --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
      
    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_DEV }}
        cluster: ${{ env.ECS_CLUSTER_DEV }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        
        # Get the service status
        aws ecs describe-services --cluster $ECS_CLUSTER_DEV --services $ECS_SERVICE_DEV --query 'services[0].deployments'
        
        # Get the load balancer DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Application should be available at: http://$ALB_DNS"
        fi

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Running health check against http://$ALB_DNS/health"
          
          # Try health check endpoint (retry up to 5 times)
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/health"; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "Could not find ALB DNS name for health check"
        fi
        
  deploy-qa:
    name: Build and Deploy to QA
    runs-on: ubuntu-latest
    needs: build-and-deploy-dev
    environment: qa

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_SERVICE_QA --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-deploy-dev.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_QA }}
        cluster: ${{ env.ECS_CLUSTER_QA }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        
        # Get the service status
        aws ecs describe-services --cluster $ECS_CLUSTER_QA --services $ECS_SERVICE_QA --query 'services[0].deployments'
        
        # Get the load balancer DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Application should be available at: http://$ALB_DNS"
        fi

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Running health check against http://$ALB_DNS/health"
          
          # Try health check endpoint (retry up to 5 times)
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/health"; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "Could not find ALB DNS name for health check"
        fi
        
