name: Deploy to PROD

on:
  push:
    branches: [ main ]
    paths: 
      - 'application/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'application/**'
  workflow_dispatch:    

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: base-infra-dev
  ECS_SERVICE_DEV: base-infra-dev
  ECS_CLUSTER_DEV: base-infra-dev
  ECS_SERVICE_QA: base-infra-qa
  ECS_CLUSTER_QA: base-infra-qa
  ECS_SERVICE_PROD: base-infra-prod
  ECS_CLUSTER_PROD: base-infra-prod 
  CONTAINER_NAME: base-infra

jobs:
  build-and-deploy-dev:
    name: Build and Deploy to dev
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image-name: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
    - name: Create short sha tag for image
      id: short-sha
      run: echo "sha=$(echo ${{ github.sha}} | cut -c1-7)" >>$GITHUB_OUTPUT
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }} 
      run: |
        cd application
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha}} .
        
        # Push both tagged and latest images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha }}
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.short-sha.outputs.sha }}" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_SERVICE_DEV --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
      
    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_DEV }}
        cluster: ${{ env.ECS_CLUSTER_DEV }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        
        # Get the service status
        aws ecs describe-services --cluster $ECS_CLUSTER_DEV --services $ECS_SERVICE_DEV --query 'services[0].deployments'
        
        # Get the load balancer DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Application should be available at: http://$ALB_DNS"
        fi

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Running health check against http://$ALB_DNS/health"
          
          # Try health check endpoint (retry up to 5 times)
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/health"; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "Could not find ALB DNS name for health check"
        fi

    - name: Comprehensive DEV Environment Testing
      run: |
        # Get ALB DNS name for dev environment
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ -z "$ALB_DNS" ]; then
          echo "❌ Could not find ALB DNS name for comprehensive testing"
          exit 1
        fi
        
        echo "🧪 Starting comprehensive testing for DEV environment: $ALB_DNS" > dev-test-results-summary.md       
        
        # Test 1: Application Content Validation >> dev-test-results-summary.md
        echo "📝 Test 1: Application Content Validation" >> dev-test-results-summary.md
        if curl -s "http://$ALB_DNS/" | grep -q "AWS ECS Demo"; then
          echo "✅ Home page content validated" >> dev-test-results-summary.md
        else
          echo "❌ Home page content missing or incorrect" >> dev-test-results-summary.md
          exit 1
        fi
        
        if curl -s "http://$ALB_DNS/about.html" | grep -q "About"; then
          echo "✅ About page content validated" >> dev-test-results-summary.md
        else
          echo "❌ About page content missing or incorrect" >> dev-test-results-summary.md
          exit 1
        fi
        
        # Test 2: Performance Validation >> dev-test-results-summary.md
        echo "⚡ Test 2: Performance Validation"
        response_time=$(curl -o /dev/null -s -w '%{time_total}' "http://$ALB_DNS/")
        if (( $(echo "$response_time < 3.0" | bc -l) )); then
          echo "✅ Response time acceptable: ${response_time}s"
        else
          echo "❌ Response time too slow: ${response_time}s"
          exit 1
        fi
        
        # Test 3: ECS Service Health 
        echo "🏥 Test 3: ECS Service Health" >> dev-test-results-summary.md
        running_tasks=$(aws ecs describe-services --cluster $ECS_CLUSTER_DEV --services $ECS_SERVICE_DEV --query 'services[0].runningCount' --output text)
        desired_tasks=$(aws ecs describe-services --cluster $ECS_CLUSTER_DEV --services $ECS_SERVICE_DEV --query 'services[0].desiredCount' --output text)
        
        if [ "$running_tasks" -eq "$desired_tasks" ] && [ "$running_tasks" -gt 0 ]; then
          echo "✅ ECS service healthy: $running_tasks/$desired_tasks tasks running" >> dev-test-results-summary.md
        else
          echo "❌ ECS service unhealthy: $running_tasks/$desired_tasks tasks running" >> dev-test-results-summary.md
          exit 1
        fi
                
        echo "🎉 All DEV environment tests passed!" >> dev-test-results-summary.md

    - name: DEV Environment Smoke Test
      run: |
        # Quick smoke test for critical functionality
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-dev`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "🔍 Running smoke test for DEV environment" >> dev-test-results-summary.md
          
          # Test critical endpoints
          critical_endpoints=("/" "/about.html" "/health")
          
          for endpoint in "${critical_endpoints[@]}"; do
            if curl -f -s "http://$ALB_DNS$endpoint" > /dev/null; then
              echo "✅ $endpoint is accessible" >> dev-test-results-summary.md
            else
              echo "❌ $endpoint is not accessible" >> dev-test-results-summary.md
              exit 1
            fi
          done
          
          echo "🎯 DEV smoke test completed successfully" >> dev-test-results-summary.md
        else
          echo "❌ Could not find ALB DNS for smoke test" >> dev-test-results-summary.md
          exit 1
        fi
    - name: Upload Test Results Summary
      uses: actions/upload-artifact@v4
      with:
        name: dev-test-results-summary
        path: dev-test-results-summary.md
        retention-days: 7
        
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: build-and-deploy-dev
    environment: qa

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_SERVICE_QA --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-deploy-dev.outputs.image-name }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_QA }}
        cluster: ${{ env.ECS_CLUSTER_QA }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        
        # Get the service status
        aws ecs describe-services --cluster $ECS_CLUSTER_QA --services $ECS_SERVICE_QA --query 'services[0].deployments'
        
        # Get the load balancer DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Application should be available at: http://$ALB_DNS"
        fi

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Running health check against http://$ALB_DNS/health"
          
          # Try health check endpoint (retry up to 5 times)
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/health"; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "Could not find ALB DNS name for health check"
        fi

    # - name: Comprehensive QA Environment Testing
    #   run: |
    #     # Get ALB DNS name for qa environment
    #     ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
    #     if [ -z "$ALB_DNS" ]; then
    #       echo "❌ Could not find ALB DNS name for comprehensive testing"
    #       exit 1
    #     fi
        
    #     echo "🧪 Starting comprehensive testing for QA environment: $ALB_DNS"
        
    #     # Test 1: Application Content Validation
    #     echo "📝 Test 1: Application Content Validation"
    #     if curl -s "http://$ALB_DNS/" | grep -q "AWS ECS Demo"; then
    #       echo "✅ Home page content validated"
    #     else
    #       echo "❌ Home page content missing or incorrect"
    #       exit 1
    #     fi
        
    #     if curl -s "http://$ALB_DNS/about.html" | grep -q "About"; then
    #       echo "✅ About page content validated"
    #     else
    #       echo "❌ About page content missing or incorrect"
    #       exit 1
    #     fi
        
    #     # Test 2: Performance Validation (stricter for QA)
    #     echo "⚡ Test 2: Performance Validation"
    #     response_time=$(curl -o /dev/null -s -w '%{time_total}' "http://$ALB_DNS/")
    #     if (( $(echo "$response_time < 2.5" | bc -l) )); then
    #       echo "✅ Response time acceptable: ${response_time}s"
    #     else
    #       echo "❌ Response time too slow: ${response_time}s"
    #       exit 1
    #     fi
        
    #     # Test 3: Security Headers Validation
    #     echo "🔒 Test 3: Security Headers Validation"
    #     headers=$(curl -s -I "http://$ALB_DNS/")
        
    #     security_headers=("X-Frame-Options" "X-Content-Type-Options" "X-XSS-Protection" "Referrer-Policy")
    #     for header in "${security_headers[@]}"; do
    #       if echo "$headers" | grep -q "$header"; then
    #         echo "✅ $header header present"
    #       else
    #         echo "❌ $header header missing"
    #         exit 1
    #       fi
    #     done
        
    #     # Test 4: Load Testing (QA specific)
    #     echo "🚀 Test 4: Load Testing"
    #     for i in {1..10}; do
    #       if ! curl -f -s "http://$ALB_DNS/health" > /dev/null; then
    #         echo "❌ Load test failed on request $i"
    #         exit 1
    #       fi
    #     done
    #     echo "✅ Load test passed: 10 concurrent requests successful"
        
    #     # Test 5: ECS Service Health
    #     echo "🏥 Test 5: ECS Service Health"
    #     running_tasks=$(aws ecs describe-services --cluster $ECS_CLUSTER_QA --services $ECS_SERVICE_QA --query 'services[0].runningCount' --output text)
    #     desired_tasks=$(aws ecs describe-services --cluster $ECS_CLUSTER_QA --services $ECS_SERVICE_QA --query 'services[0].desiredCount' --output text)
        
    #     if [ "$running_tasks" -eq "$desired_tasks" ] && [ "$running_tasks" -gt 0 ]; then
    #       echo "✅ ECS service healthy: $running_tasks/$desired_tasks tasks running"
    #     else
    #       echo "❌ ECS service unhealthy: $running_tasks/$desired_tasks tasks running"
    #       exit 1
    #     fi
        
    #     echo "🎉 All QA environment tests passed!"

    # - name: QA Environment Integration Test
    #   run: |
    #     # Integration test for QA environment
    #     ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-qa`)].DNSName' --output text)
        
    #     if [ ! -z "$ALB_DNS" ]; then
    #       echo "🔗 Running integration test for QA environment"
          
    #       # Test user journey
    #       echo "Testing user journey: Home → About → Back to Home"
          
    #       # Step 1: Access home page
    #       if curl -s "http://$ALB_DNS/" | grep -q "AWS ECS Demo"; then
    #         echo "✅ Step 1: Home page accessible"
    #       else
    #         echo "❌ Step 1: Home page failed"
    #         exit 1
    #       fi
          
    #       # Step 2: Access about page
    #       if curl -s "http://$ALB_DNS/about.html" | grep -q "About"; then
    #         echo "✅ Step 2: About page accessible"
    #       else
    #         echo "❌ Step 2: About page failed"
    #         exit 1
    #       fi
          
    #       # Step 3: Test navigation consistency
    #       home_response=$(curl -s "http://$ALB_DNS/")
    #       about_response=$(curl -s "http://$ALB_DNS/about.html")
          
    #       if [[ "$home_response" == *"AWS ECS Demo"* ]] && [[ "$about_response" == *"About"* ]]; then
    #         echo "✅ Step 3: Navigation consistency verified"
    #       else
    #         echo "❌ Step 3: Navigation consistency failed"
    #         exit 1
    #       fi
          
    #       echo "🎯 QA integration test completed successfully"
    #     else
    #       echo "❌ Could not find ALB DNS for integration test"
    #       exit 1
    #     fi


  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: [deploy-qa, build-and-deploy-dev]
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_SERVICE_PROD --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-deploy-dev.outputs.image-name }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_PROD }}
        cluster: ${{ env.ECS_CLUSTER_PROD }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        
        # Get the service status
        aws ecs describe-services --cluster $ECS_CLUSTER_PROD --services $ECS_SERVICE_PROD --query 'services[0].deployments'
        
        # Get the load balancer DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-prod`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Application should be available at: http://$ALB_DNS"
        fi

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get ALB DNS name
        ALB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `base-infra-prod`)].DNSName' --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Running health check against http://$ALB_DNS/health"
          
          # Try health check endpoint (retry up to 5 times)
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/health"; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        else
          echo "Could not find ALB DNS name for health check"
        fi

        
  test-results:
    name: Test Results
    runs-on: ubuntu-latest
    needs: [deploy-qa, build-and-deploy-dev, deploy-prod]
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: dev-test-results-summary        
      
    
